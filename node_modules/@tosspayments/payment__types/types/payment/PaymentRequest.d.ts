import type { CardCompany, CardCompanyCode, Bank, BankCode, MobileCarrier, EasyPayProvider, EasyPayProviderCode } from '@tosspayments/sdk-constants';
import { ValueOf } from 'type-fest';
export declare const PaymentMethod: {
    readonly 카드: "CARD";
    readonly 가상계좌: "VIRTUAL_ACCOUNT";
    readonly 휴대폰: "MOBILE_PHONE";
    readonly 토스결제: "TOSSPAY";
    readonly 계좌이체: "TRANSFER";
    readonly 문화상품권: "CULTURE_GIFT_CERTIFICATE";
    readonly 게임문화상품권: "GAME_GIFT_CERTIFICATE";
    readonly 도서문화상품권: "BOOK_GIFT_CERTIFICATE";
    readonly 해외간편결제: "FOREIGN_EASY_PAY";
    readonly 미선택: "";
};
export declare type PaymentMethodType = keyof typeof PaymentMethod;
export declare type PaymentMethodCode = ValueOf<typeof PaymentMethod>;
export interface BasePaymentRequest {
    amount: number;
    orderName: string;
    successUrl: string;
    failUrl: string;
    orderId: string;
    customerName?: string;
    customerEmail?: string;
    taxFreeAmount?: number;
    cultureExpense?: boolean;
    forceFailure?: boolean;
    windowTarget?: 'iframe' | 'self';
}
export interface CommonPaymentRequest extends BasePaymentRequest {
}
interface BaseCardPaymentRequest extends BasePaymentRequest {
    cardInstallmentPlan?: number;
    maxCardInstallmentPlan?: number;
    useInternationalCardOnly?: boolean;
    useAppCardOnly?: boolean;
    useCardPoint?: boolean;
    freeInstallmentPlans?: Array<{
        company: CardCompany | CardCompanyCode;
        months: number[];
    }>;
}
export interface DefaultCardPaymentRequest extends BaseCardPaymentRequest {
    flowMode?: 'DEFAULT';
    cardCompany?: CardCompany | CardCompanyCode;
    easyPay?: EasyPayProvider | EasyPayProviderCode;
}
export interface DirectCardPaymentRequest extends BaseCardPaymentRequest {
    flowMode: 'DIRECT';
    cardCompany: CardCompany | CardCompanyCode;
    easyPay?: never;
}
export interface DirectEasyPayPaymentRequest extends BaseCardPaymentRequest {
    flowMode: 'DIRECT';
    cardCompany?: never;
    easyPay: EasyPayProvider | EasyPayProviderCode;
}
export declare type CardPaymentRequest = DefaultCardPaymentRequest | DirectCardPaymentRequest | DirectEasyPayPaymentRequest;
interface EscrowProduct {
    productId: string;
    productCode: string;
    productName: string;
    unitPrice: number;
    quantity: number;
}
interface CashReceipt {
    type?: '소득공제' | '지출증빙';
}
export interface VirtualAccountPaymentRequest extends BasePaymentRequest {
    /**
     * @description 에스크로 결제를 사용할 지 여부.
     * true로 넘기면 항상 에스크로 결제를 사용, false로 넘기면 에스크로 결제를 항상 사용하지 않도록 함.
     * 넘기지 않으면 사용자가 선택할 수 있음.
     */
    useEscrow?: boolean;
    escrowProducts?: EscrowProduct[];
    cashReceipt?: CashReceipt;
    /**
     * @deprecated 대신 `cashReceipt` 필드를 사용해주세요.
     */
    cashReceiptInfo?: CashReceipt;
    validHours?: number;
    virtualAccountCallbackUrl?: string;
    customerMobilePhone?: string;
}
export interface PhonePaymentRequest extends BasePaymentRequest {
    mobileCarrier?: MobileCarrier;
}
export interface TranferPaymentRequest extends BasePaymentRequest {
    bank?: BankCode | Bank;
    cashReceipt?: CashReceipt;
}
export declare type PaymentRequest = CommonPaymentRequest | CardPaymentRequest | VirtualAccountPaymentRequest | TranferPaymentRequest;
export {};
